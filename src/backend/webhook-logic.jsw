// src/backend/webhook-logic.jsw
// Check for existing member BEFORE trying to register

import { contacts } from 'wix-crm-backend';
import { register, sendSetPasswordEmail, queryMembers } from 'wix-members-backend';
import { elevate } from 'wix-auth';
import wixData from 'wix-data';

// Collection IDs
const MEMBERS_COLLECTION_ID = "Members/PrivateMembersData";
const STUDIO_APPLICATIONS_COLLECTION_ID = "Import1";

/**
 * Finds or creates a CRM contact record.
 */
export async function findOrCreateContact(payload) {
    const contactInfo = {
        name: { first: payload.firstName || "", last: payload.lastName || "" },
        emails: [{ tag: 'MAIN', email: payload.email }],
        phones: payload.phone ? [{ tag: 'MOBILE', phone: payload.phone }] : [],
    };
    
    const result = await elevate(contacts.appendOrCreateContact)(contactInfo);
    console.log(`Processed contact with ID: ${result.contactId}`);
    return result.contactId;
}

/**
 * Finds existing site member or creates a new one with a welcome email.
 */
export async function findOrCreateMember(contactId, email) {
    // First check if member exists by email (to avoid registration errors)
    const emailQuery = await elevate(queryMembers)({ loginEmail: email })
        .limit(1)
        .find();
        
    if (emailQuery.items.length > 0) {
        const authMember = emailQuery.items[0];
        console.log(`Found existing auth member with ID: ${authMember._id}`);
        
        // Get or create the member profile record
        let memberData;
        try {
            memberData = await elevate(wixData.get)(MEMBERS_COLLECTION_ID, authMember._id);
        } catch (e) {
            // Profile doesn't exist, create it
            memberData = {
                _id: authMember._id,
                loginEmail: email,
                contactId: contactId
            };
            memberData = await elevate(wixData.insert)(MEMBERS_COLLECTION_ID, memberData);
            console.log('Created missing member profile');
        }
        
        return { memberId: authMember._id, memberData: memberData };
    }
    
    // No existing member, create new one
    try {
        const tempPassword = generateTempPassword();
        const registerMemberResult = await elevate(register)(email, tempPassword, {
            contactInfo: {
                contactId: contactId
            }
        });
        const member = registerMemberResult.member;
        console.log(`Created new member with ID: ${member._id}`);
        
        // Send password setup email
        await elevate(sendSetPasswordEmail)(email);
        console.log(`Password setup email sent to ${email}`);
        
        return { memberId: member._id, memberData: member };
    } catch (error) {
        console.error(`Error creating member:`, error);
        throw new Error(`Failed to create member account`);
    }
}

/**
 * Transforms raw form data into a structured application record.
 */
export function buildApplicationData(payload, memberId) {
    const applicationData = {
        applicant: memberId,
        applicationID: payload.applicationID,
        email: payload.email,
        firstName: payload.firstName,
        lastName: payload.lastName,
        applicationStage: payload.applicationStage || "Applied",
        applicantStatus: payload.applicantStatus || "applicant",
        hasExperience: payload.hasExperience,
        experienceDescription: payload.experienceDescription,
        hasTechniques: payload.hasTechniques,
        practiceDescription: payload.practiceDescription,
        knowsSafety: payload.knowsSafety,
        safetyDescription: payload.safetyDescription,
        purchaseIntention: payload.purchaseIntention,
        selfID: payload.selfID,
        communityCommitment: payload.communityCommitment,
        communityInterest: payload.communityInterest,
        phone: payload.phone,
        address: payload.address,
        website: payload.website,
        instagram: payload.instagram,
        source: payload.source,
        questions: payload.questions,
        submissionDate: new Date(),
        status: "pending",
        formSource: "fillout_form",
        filloutURL: payload.filloutURL
    };

    // Clean undefined/null fields
    Object.keys(applicationData).forEach(key => {
        if (applicationData[key] === undefined || applicationData[key] === null) {
            delete applicationData[key];
        }
    });
    return applicationData;
}

/**
 * Creates a bidirectional link between member and application records.
 */
export async function updateMemberWithApplication(memberId, memberData, applicationId) {
    if (!memberId || !applicationId) {
        console.log('Skipping member update: missing memberId or applicationId');
        return;
    }
    
    try {
        // Get the full member record if not provided
        let fullMemberData = memberData;
        if (!fullMemberData) {
            fullMemberData = await elevate(wixData.get)(MEMBERS_COLLECTION_ID, memberId);
            if (!fullMemberData) {
                console.log(`Member ${memberId} not found in collection`);
                return;
            }
        }
        
        const existingApplications = fullMemberData.studioApplications || [];
        
        // Prevent duplicate application references
        if (existingApplications.includes(applicationId)) {
            console.log('Application already linked to member');
            return;
        }
        
        // Update the full member object
        fullMemberData.studioApplications = [...existingApplications, applicationId];
        fullMemberData.lastApplicationDate = new Date();
        
        await elevate(wixData.update)(MEMBERS_COLLECTION_ID, fullMemberData);
        console.log(`Updated member ${memberId} with application ${applicationId}`);
        
    } catch (error) {
        console.error('Failed to update member with application:', error);
        // Don't throw - we don't want to fail the entire webhook
    }
}

/**
 * Inserts the finalized application record into the database.
 */
export async function createApplicationRecord(applicationData) {
    if (!applicationData) {
        throw new Error("Application data cannot be empty.");
    }
    console.log("Inserting application record into database...");
    
    const newApplication = await wixData.insert(STUDIO_APPLICATIONS_COLLECTION_ID, applicationData);
    
    console.log("New Studio Application record created with ID:", newApplication._id);
    return newApplication;
}

/**
 * Helper function to generate a secure temporary password.
 */
function generateTempPassword() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%';
    let password = '';
    for (let i = 0; i < 12; i++) {
        password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
}