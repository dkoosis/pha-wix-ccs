// src/backend/webhook-logic.jsw
// Consolidated and corrected version

import { contacts } from 'wix-crm-backend';
import { register, sendSetPasswordEmail } from 'wix-members-backend';
import { elevate } from 'wix-auth';
import wixData from 'wix-data';

// --- Collection Name Constants ---
// It's good practice to keep these at the top for easy configuration.
const MEMBERS_COLLECTION_ID = "Members/PrivateMembersData";
const APPLICATIONS_COLLECTION_ID = "Import1"; // Please verify this is your applications collection

// --- CONTACT LOGIC ---

/**
 * Finds an existing CRM contact by email or creates a new one.
 * @param {object} payload - The form submission data containing contact information.
 * @returns {Promise<string>} The ID of the found or created contact.
 */
// -------------------- PASTE THIS ENTIRE FUNCTION --------------------

/**
 * Finds an existing CRM contact by email or creates a new one.
 * @param {object} payload - The form submission data containing contact information.
 * @returns {Promise<string>} The ID of the found or created contact.
 */
export async function findOrCreateContact(payload) {
    if (!payload.email) {
        throw new Error("Email is required to find or create a contact.");
    }

    try {
        // --- FIX 1: Corrected the query field from "info.emails.email" to "emails.email" ---
        const queryResult = await elevate(contacts.queryContacts)()
            .eq("emails.email", payload.email) // Corrected field
            .limit(1)
            .find();

        if (queryResult.items.length > 0) {
            const existingContact = queryResult.items[0];
            console.log(`Found existing contact: ${existingContact._id}`);
            return existingContact._id;
        }

        console.log(`No existing contact found. Creating new contact for: ${payload.email}`);
        const contactInfo = {
            name: { first: payload.firstName || '', last: payload.lastName || '' },
            emails: [{ email: payload.email, tag: "MAIN", primary: true }],
            phones: payload.phone ? [{ phone: payload.phone, tag: "MAIN" }] : []
        };

        // --- FIX 2: Corrected the createContact call to pass contactInfo directly ---
        const { contact } = await elevate(contacts.createContact)(contactInfo); // Corrected call
        
        console.log(`Created new contact with ID: ${contact._id}`);
        return contact._id;

    } catch (error) {
        console.error("Error in findOrCreateContact:", error);
        throw new Error(`Failed to find or create contact: ${error.message}`);
    }
}

// --- MEMBER LOGIC ---

/**
 * Finds a site member by email or contact ID, or registers a new one.
 * @param {string} contactId - The ID of the CRM contact.
 * @param {string} email - The email address.
 * @returns {Promise<{memberId: string, isNew: boolean}>} An object with the member's ID and a flag indicating if they were newly created.
 */
export async function findOrCreateMember(contactId, email) {
    if (!contactId || !email) {
        throw new Error("Both contactId and email are required for findOrCreateMember.");
    }

    // Elevated function to query the private members collection
    const findMember = elevate(async (queryOptions) => {
        let query = wixData.query(MEMBERS_COLLECTION_ID);
        if (queryOptions.email) {
            query = query.eq("loginEmail", queryOptions.email);
        } else if (queryOptions.contactId) {
            query = query.eq("contactId", queryOptions.contactId);
        }
        const results = await query.limit(1).find();
        return results.items[0];
    });

    // 1. Find by email first (most reliable for login)
    let member = await findMember({ email });
    if (member) {
        console.log(`Found member by email: ${member._id}`);
        return { memberId: member._id, isNew: false };
    }

    // 2. If not found, find by contactId
    member = await findMember({ contactId });
    if (member) {
        console.log(`Found member by contactId: ${member._id}`);
        return { memberId: member._id, isNew: false };
    }

    // 3. If no member exists, register a new one
    try {
        console.log(`Registering new member for email: ${email}`);
        const registrationResult = await register(email, generateTempPassword(), {
            contactInfo: { contactId: contactId }
        });
        const newMember = registrationResult.member;
        console.log(`Created new member with ID: ${newMember._id}`);

        // Don't let the email block the main flow
        sendSetPasswordEmail(email).catch(err => {
            console.error(`Non-critical error: Failed to send password setup email to ${email}.`, err);
        });

        return { memberId: newMember._id, isNew: true };
    } catch (error) {
        if (error.message.includes("is already a site member")) {
            console.error(`CRITICAL: Registration failed because member ${email} exists but could not be queried. Manual review needed.`);
             // You might want to retry querying by email here one last time.
        } else {
            console.error("Error during member registration:", error);
        }
        // Return a temporary ID so the application data can still be saved.
        return { memberId: `pending_${Date.now()}`, isNew: false };
    }
}


// --- APPLICATION LOGIC ---

/**
 * Transforms raw form payload into a structured application record.
 * @param {object} payload - The raw data from the form webhook.
 * @param {string} memberId - The ID of the associated member.
 * @returns {object} The structured application data object.
 */
export function buildApplicationData(payload, memberId) {
    const applicationData = {
        applicant: memberId, // Link to the member record
        applicationID: payload.applicationID,
        email: payload.email,
        firstName: payload.firstName,
        lastName: payload.lastName,
        applicationStage: payload.applicationStage || "Applied",
        applicantStatus: payload.applicantStatus || "applicant",
        hasExperience: payload.hasExperience,
        experienceDescription: payload.experienceDescription,
        hasTechniques: payload.hasTechniques,
        practiceDescription: payload.practiceDescription,
        knowsSafety: payload.knowsSafety,
        safetyDescription: payload.safetyDescription,
        purchaseIntention: payload.purchaseIntention,
        selfID: payload.selfID,
        communityCommitment: payload.communityCommitment,
        communityInterest: payload.communityInterest,
        phone: payload.phone,
        address: payload.address,
        website: payload.website,
        instagram: payload.instagram,
        source: payload.source,
        questions: payload.questions,
        submissionDate: new Date(),
        status: "pending",
        formSource: "fillout_form",
        filloutURL: payload.filloutURL
    };

    // Clean undefined/null fields before insertion
    Object.keys(applicationData).forEach(key => {
        if (applicationData[key] === undefined || applicationData[key] === null) {
            delete applicationData[key];
        }
    });
    return applicationData;
}

/**
 * Inserts the finalized application record into the database.
 * @param {object} applicationData - The application data to insert.
 * @returns {Promise<object>} The newly created application record.
 */
export async function createApplicationRecord(applicationData) {
    if (!applicationData) {
        throw new Error("Application data cannot be empty.");
    }
    console.log("Inserting application record into database...");
    const options = { "suppressAuth": true }; // Necessary for backend data operations
    const newApplication = await wixData.insert(APPLICATIONS_COLLECTION_ID, applicationData, options);
    console.log(`New application record created with ID: ${newApplication._id}`);
    return newApplication;
}

/**
 * Updates the member record with a reference to their new application.
 * @param {string} memberId - The ID of the member to update.
 * @param {string} applicationId - The ID of the application to link.
 */
export async function updateMemberWithApplication(memberId, applicationId) {
    if (!memberId || !applicationId || memberId.startsWith('pending_')) {
        console.log('Skipping member update: memberId is missing or temporary.');
        return;
    }
    const options = { "suppressAuth": true };
    try {
        const memberData = await wixData.get(MEMBERS_COLLECTION_ID, memberId, options);
        const existingApplications = memberData.studioApplications || [];
        if (!existingApplications.includes(applicationId)) {
            // Using a multi-reference field 'studioApplications'
            await wixData.insertReference(MEMBERS_COLLECTION_ID, "studioApplications", memberId, applicationId, options);
            console.log(`Linked application ${applicationId} to member ${memberId}`);
        } else {
            console.log(`Member ${memberId} already linked to application ${applicationId}.`);
        }
    } catch (error) {
        console.error(`Failed to update member ${memberId} with application:`, error);
    }
}


// --- UTILITY FUNCTIONS ---

/**
 * Generates a simple, random temporary password for new member registration.
 * This is safe because the user is immediately prompted to set a real password.
 */
function generateTempPassword() {
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let password = '';
    for (let i = 0; i < 16; i++) {
        password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
}