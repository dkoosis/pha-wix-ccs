// src/backend/webhook-logic.jsw
// BACK TO BASICS - Simple working version

import { contacts } from 'wix-crm-backend';
import { register, sendSetPasswordEmail } from 'wix-members-backend';
import { elevate } from 'wix-auth';
import wixData from 'wix-data';

// Collection IDs
const MEMBERS_COLLECTION_ID = "Members/PrivateMembersData";
const STUDIO_APPLICATIONS_COLLECTION_ID = "Import1";

/**
 * Finds or creates a CRM contact record.
 */
export async function findOrCreateContact(payload) {
    console.log('Creating contact with payload:', JSON.stringify({
        firstName: payload.firstName,
        lastName: payload.lastName,
        email: payload.email,
        phone: payload.phone
    }));
    
    // Validate required fields
    if (!payload.email) {
        throw new Error('Email is required for contact creation');
    }
    
    const contactInfo = {
        name: {
            first: payload.firstName || '',
            last: payload.lastName || ''
        },
        emails: [{
            email: payload.email,
            tag: 'MAIN'
        }]
    };
    
    // Only add phone if it exists
    if (payload.phone) {
        contactInfo.phones = [{
            phone: payload.phone,
            tag: 'MOBILE'
        }];
    }
    
    console.log('Contact info to send:', JSON.stringify(contactInfo));
    
    try {
        const result = await elevate(contacts.appendOrCreateContact)(contactInfo);
        console.log(`Processed contact with ID: ${result.contactId}`);
        return result.contactId;
    } catch (crmError) {
        console.error('CRM API Error:', crmError);
        console.error('CRM Error details:', JSON.stringify(crmError));
        throw new Error(`Contact creation failed: ${crmError?.message || 'CRM API error'}`);
    }
}

/**
 * Finds existing site member or creates a new one with a welcome email.
 */
export async function findOrCreateMember(contactId, email) {
    // First check if member exists by email (to avoid registration errors)
    const emailQuery = await elevate(wixData.query(MEMBERS_COLLECTION_ID)
        .eq("loginEmail", email)
        .find)();
        
    if (emailQuery.items.length > 0) {
        const member = emailQuery.items[0];
        console.log(`Found existing member by email: ${member._id}`);
        // Update contactId if missing
        if (!member.contactId) {
            member.contactId = contactId;
            await elevate(wixData.update)(MEMBERS_COLLECTION_ID, member);
        }
        return { memberId: member._id, memberData: member };
    }
    
    // Check if member exists by contactId
    const memberQuery = await elevate(wixData.query(MEMBERS_COLLECTION_ID)
        .eq("contactId", contactId)
        .find)();

    if (memberQuery.items.length > 0) {
        const member = memberQuery.items[0];
        console.log(`Found existing Member ID: ${member._id}`);
        return { memberId: member._id, memberData: member };
    }
    
    // No existing member found, create new one
    try {
        console.log(`Creating new member for email: ${email}`);
        const tempPassword = generateTempPassword();
        const registerMemberResult = await elevate(register)(email, tempPassword, {
            contactInfo: {
                contactId: contactId
            }
        });
        const member = registerMemberResult.member;
        console.log(`Created new member with ID: ${member._id}`);
        
        // Send password setup email (don't fail if this fails)
        try {
            await elevate(sendSetPasswordEmail)(email);
            console.log(`Password setup email sent to ${email}`);
        } catch (emailError) {
            console.log(`Failed to send password email, continuing anyway`);
        }
        
        return { memberId: member._id, memberData: member };
    } catch (registerError) {
        console.error(`Registration failed, generating temporary ID`);
        // Create a temporary member ID so we don't lose the application
        const tempMemberId = `pending_${Date.now()}`;
        return { memberId: tempMemberId, memberData: null };
    }
}

/**
 * Transforms raw form data into a structured application record.
 */
export function buildApplicationData(payload, memberId) {
    const applicationData = {
        applicant: memberId,
        applicationID: payload.applicationID,
        email: payload.email,
        firstName: payload.firstName,
        lastName: payload.lastName,
        applicationStage: payload.applicationStage || "Applied",
        applicantStatus: payload.applicantStatus || "applicant",
        hasExperience: payload.hasExperience,
        experienceDescription: payload.experienceDescription,
        hasTechniques: payload.hasTechniques,
        practiceDescription: payload.practiceDescription,
        knowsSafety: payload.knowsSafety,
        safetyDescription: payload.safetyDescription,
        purchaseIntention: payload.purchaseIntention,
        selfID: payload.selfID,
        communityCommitment: payload.communityCommitment,
        communityInterest: payload.communityInterest,
        phone: payload.phone,
        address: payload.address,
        website: payload.website,
        instagram: payload.instagram,
        source: payload.source,
        questions: payload.questions,
        submissionDate: new Date(),
        status: "pending",
        formSource: "fillout_form",
        filloutURL: payload.filloutURL
    };

    // Clean undefined/null fields
    Object.keys(applicationData).forEach(key => {
        if (applicationData[key] === undefined || applicationData[key] === null) {
            delete applicationData[key];
        }
    });
    return applicationData;
}

/**
 * Creates a bidirectional link between member and application records.
 */
export async function updateMemberWithApplication(memberId, memberData, applicationId) {
    if (!memberId || !applicationId || memberId.startsWith('pending_')) {
        console.log('Skipping member update: missing or pending memberId');
        return;
    }
    
    try {
        let fullMemberData = memberData;
        if (!fullMemberData) {
            try {
                fullMemberData = await elevate(wixData.get)(MEMBERS_COLLECTION_ID, memberId);
            } catch (e) {
                console.log(`Member ${memberId} not found in collection`);
                return;
            }
        }
        
        const existingApplications = fullMemberData.studioApplications || [];
        
        if (!existingApplications.includes(applicationId)) {
            fullMemberData.studioApplications = [...existingApplications, applicationId];
            fullMemberData.lastApplicationDate = new Date();
            await elevate(wixData.update)(MEMBERS_COLLECTION_ID, fullMemberData);
            console.log(`Updated member ${memberId} with application ${applicationId}`);
        }
        
    } catch (error) {
        console.error('Failed to update member with application:', error);
    }
}

/**
 * Inserts the finalized application record into the database.
 */
export async function createApplicationRecord(applicationData) {
    if (!applicationData) {
        throw new Error("Application data cannot be empty.");
    }
    console.log("Inserting application record into database...");
    
    const newApplication = await wixData.insert(STUDIO_APPLICATIONS_COLLECTION_ID, applicationData);
    
    console.log("New Studio Application record created with ID:", newApplication._id);
    return newApplication;
}

/**
 * Helper function to generate a secure temporary password.
 */
function generateTempPassword() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%';
    let password = '';
    for (let i = 0; i < 12; i++) {
        password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return password;
}