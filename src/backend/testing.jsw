// src/backend/testing.jsw
// Comprehensive test suite for Studio Application Webhook
// This module contains all test functions that can be called via HTTP endpoints

import { contacts } from 'wix-crm-backend';
import { authentication } from 'wix-members-backend';
import { elevate } from 'wix-auth';
import wixData from 'wix-data';
import { getSecret } from 'wix-secrets-backend';

// Import the functions we want to test
// Note: You'll need to export these from your webhook module first
import { 
    findOrCreateContact, 
    findOrCreateMember, 
    buildApplicationData,
    post_helloWebhook 
} from 'backend/http-functions.js';

// Test configuration
const TEST_CONFIG = {
    testEmailPrefix: 'test_',
    testEmailDomain: '@example.com',
    cleanupAfterTests: true,
    collections: {
        members: 'Members/PrivateMembersData',
        applications: 'Import1' // TODO: Rename to StudioApplications
    }
};

// Test data generators
function generateTestEmail() {
    const timestamp = new Date().getTime();
    const random = Math.floor(Math.random() * 1000);
    return `${TEST_CONFIG.testEmailPrefix}${timestamp}_${random}${TEST_CONFIG.testEmailDomain}`;
}

function generateTestPayload(overrides = {}) {
    const email = overrides.email || generateTestEmail();
    return {
        applicationID: `test_${new Date().getTime()}_${Math.random().toString(36).substr(2, 9)}`,
        email: email,
        firstName: overrides.firstName || 'Test',
        lastName: overrides.lastName || 'User',
        phone: '+1234567890',
        applicationStage: 'Applied',
        applicantStatus: 'applicant',
        hasExperience: true,
        experienceDescription: 'Test experience description',
        hasTechniques: ['wheel throwing', 'hand building'],
        practiceDescription: 'Test practice description',
        knowsSafety: true,
        safetyDescription: 'Test safety knowledge',
        purchaseIntention: 'Test purchase intention',
        selfID: false,
        communityCommitment: 'Test commitment',
        communityInterest: 'Test interest',
        address: '123 Test St, Test City, TC 12345',
        website: 'https://test.example.com',
        instagram: '@test_user',
        source: 'Test source',
        questions: 'Test questions',
        filloutURL: { submission: 'https://fillout.com/test/12345' },
        ...overrides
    };
}

// Test result structure
function createTestResult(testName, status, details = {}) {
    return {
        testName,
        status, // 'pass', 'fail', 'error'
        timestamp: new Date().toISOString(),
        duration: details.duration || 0,
        message: details.message || '',
        error: details.error || null,
        data: details.data || null
    };
}

// === UNIT TESTS ===

/**
 * Test 1: Contact Creation
 * Tests the findOrCreateContact function in isolation
 */
export async function testContactCreation() {
    const startTime = Date.now();
    const testPayload = generateTestPayload();
    
    try {
        console.log('[TEST] Starting Contact Creation Test');
        console.log('[TEST] Test email:', testPayload.email);
        
        // First creation
        const contactId1 = await findOrCreateContact(testPayload);
        if (!contactId1) {
            throw new Error('Failed to create contact - no ID returned');
        }
        console.log('[TEST] Created contact with ID:', contactId1);
        
        // Second creation with same email (should return same ID)
        const contactId2 = await findOrCreateContact(testPayload);
        if (contactId1 !== contactId2) {
            throw new Error(`Contact deduplication failed. ID1: ${contactId1}, ID2: ${contactId2}`);
        }
        console.log('[TEST] Deduplication working correctly');
        
        // Verify contact exists and has correct data
        const contact = await elevate(contacts.getContact)(contactId1);
        if (!contact) {
            throw new Error('Created contact not found');
        }
        
        if (contact.info.name.first !== testPayload.firstName || 
            contact.info.name.last !== testPayload.lastName) {
            throw new Error('Contact name mismatch');
        }
        
        const duration = Date.now() - startTime;
        return createTestResult('Contact Creation', 'pass', {
            duration,
            message: `Successfully created/found contact ${contactId1}`,
            data: { contactId: contactId1, email: testPayload.email }
        });
        
    } catch (error) {
        console.error('[TEST] Contact Creation Test Failed:', error);
        return createTestResult('Contact Creation', 'fail', {
            duration: Date.now() - startTime,
            error: error.message
        });
    }
}

/**
 * Test 2: Member Creation
 * Tests the findOrCreateMember function
 */
export async function testMemberCreation() {
    const startTime = Date.now();
    const testPayload = generateTestPayload();
    
    try {
        console.log('[TEST] Starting Member Creation Test');
        
        // Create contact first (prerequisite)
        const contactId = await findOrCreateContact(testPayload);
        console.log('[TEST] Created prerequisite contact:', contactId);
        
        // Test member creation
        const result1 = await findOrCreateMember(contactId, testPayload.email);
        if (!result1.memberId) {
            throw new Error('Failed to create member - no ID returned');
        }
        console.log('[TEST] Created member with ID:', result1.memberId);
        
        // Test finding existing member
        const result2 = await findOrCreateMember(contactId, testPayload.email);
        if (result1.memberId !== result2.memberId) {
            throw new Error(`Member deduplication failed. ID1: ${result1.memberId}, ID2: ${result2.memberId}`);
        }
        console.log('[TEST] Member deduplication working correctly');
        
        // Verify member exists in database
        const memberQuery = await elevate(wixData.query)(TEST_CONFIG.collections.members)
            .eq('_id', result1.memberId)
            .find();
            
        if (memberQuery.items.length === 0) {
            throw new Error('Created member not found in database');
        }
        
        const duration = Date.now() - startTime;
        return createTestResult('Member Creation', 'pass', {
            duration,
            message: `Successfully created/found member ${result1.memberId}`,
            data: { 
                memberId: result1.memberId, 
                contactId, 
                email: testPayload.email 
            }
        });
        
    } catch (error) {
        console.error('[TEST] Member Creation Test Failed:', error);
        return createTestResult('Member Creation', 'fail', {
            duration: Date.now() - startTime,
            error: error.message
        });
    }
}

/**
 * Test 3: Application Data Building
 * Tests the buildApplicationData function
 */
export async function testApplicationDataBuilding() {
    const startTime = Date.now();
    
    try {
        console.log('[TEST] Starting Application Data Building Test');
        
        const testPayload = generateTestPayload();
        const testMemberId = 'test_member_123';
        
        // Test with complete data
        const fullData = buildApplicationData(testPayload, testMemberId);
        
        // Verify required fields
        if (!fullData.applicant || fullData.applicant !== testMemberId) {
            throw new Error('Member ID not properly set');
        }
        if (!fullData.email || fullData.email !== testPayload.email) {
            throw new Error('Email not properly set');
        }
        if (!fullData.applicationID) {
            throw new Error('Application ID not properly set');
        }
        if (!fullData.submissionDate) {
            throw new Error('Submission date not set');
        }
        if (fullData.status !== 'pending') {
            throw new Error('Initial status should be pending');
        }
        
        console.log('[TEST] Complete data test passed');
        
        // Test with minimal data
        const minimalPayload = {
            email: 'minimal@test.com',
            applicationID: 'minimal_123'
        };
        const minimalData = buildApplicationData(minimalPayload, testMemberId);
        
        // Verify defaults are applied
        if (minimalData.applicationStage !== 'Applied') {
            throw new Error('Default applicationStage not applied');
        }
        if (minimalData.applicantStatus !== 'applicant') {
            throw new Error('Default applicantStatus not applied');
        }
        
        console.log('[TEST] Minimal data test passed');
        
        const duration = Date.now() - startTime;
        return createTestResult('Application Data Building', 'pass', {
            duration,
            message: 'Application data building works correctly',
            data: { 
                fullDataKeys: Object.keys(fullData).length,
                minimalDataKeys: Object.keys(minimalData).length 
            }
        });
        
    } catch (error) {
        console.error('[TEST] Application Data Building Test Failed:', error);
        return createTestResult('Application Data Building', 'fail', {
            duration: Date.now() - startTime,
            error: error.message
        });
    }
}

// === INTEGRATION TESTS ===

/**
 * Test 4: Full Webhook Flow
 * Tests the complete webhook process end-to-end
 */
export async function testFullWebhookFlow() {
    const startTime = Date.now();
    const testPayload = generateTestPayload();
    
    try {
        console.log('[TEST] Starting Full Webhook Flow Test');
        console.log('[TEST] Test payload:', JSON.stringify(testPayload, null, 2));
        
        // Get API key for testing
        const apiKey = await getSecret('FILLOUT_X_API_KEY');
        
        // Create mock request object
        const mockRequest = {
            headers: { 'x-api-key': apiKey },
            body: {
                json: async () => testPayload
            }
        };
        
        // Call the webhook
        const response = await post_helloWebhook(mockRequest);
        const responseBody = response.body;
        
        // Verify response
        if (response.statusCode !== 200) {
            throw new Error(`Webhook returned status ${response.statusCode}: ${JSON.stringify(responseBody)}`);
        }
        
        if (!responseBody.data || !responseBody.data.contactId || 
            !responseBody.data.memberId || !responseBody.data.applicationId) {
            throw new Error('Response missing required IDs');
        }
        
        console.log('[TEST] Webhook response:', JSON.stringify(responseBody, null, 2));
        
        // Verify records were created
        const applicationQuery = await elevate(wixData.query)(TEST_CONFIG.collections.applications)
            .eq('_id', responseBody.data.applicationId)
            .find();
            
        if (applicationQuery.items.length === 0) {
            throw new Error('Application record not found in database');
        }
        
        const application = applicationQuery.items[0];
        if (application.email !== testPayload.email) {
            throw new Error('Application email mismatch');
        }
        
        const duration = Date.now() - startTime;
        return createTestResult('Full Webhook Flow', 'pass', {
            duration,
            message: 'Complete webhook flow executed successfully',
            data: responseBody.data
        });
        
    } catch (error) {
        console.error('[TEST] Full Webhook Flow Test Failed:', error);
        return createTestResult('Full Webhook Flow', 'fail', {
            duration: Date.now() - startTime,
            error: error.message
        });
    }
}

/**
 * Test 5: Error Handling - Invalid API Key
 */
export async function testInvalidApiKey() {
    const startTime = Date.now();
    
    try {
        console.log('[TEST] Starting Invalid API Key Test');
        
        const mockRequest = {
            headers: { 'x-api-key': 'invalid_key_12345' },
            body: {
                json: async () => generateTestPayload()
            }
        };
        
        const response = await post_helloWebhook(mockRequest);
        
        if (response.statusCode !== 403) {
            throw new Error(`Expected 403, got ${response.statusCode}`);
        }
        
        const duration = Date.now() - startTime;
        return createTestResult('Invalid API Key Handling', 'pass', {
            duration,
            message: 'Correctly rejected invalid API key'
        });
        
    } catch (error) {
        console.error('[TEST] Invalid API Key Test Failed:', error);
        return createTestResult('Invalid API Key Handling', 'fail', {
            duration: Date.now() - startTime,
            error: error.message
        });
    }
}

/**
 * Test 6: Error Handling - Missing Email
 */
export async function testMissingEmail() {
    const startTime = Date.now();
    
    try {
        console.log('[TEST] Starting Missing Email Test');
        
        const apiKey = await getSecret('FILLOUT_X_API_KEY');
        const payloadWithoutEmail = generateTestPayload({ email: undefined });
        delete payloadWithoutEmail.email;
        
        const mockRequest = {
            headers: { 'x-api-key': apiKey },
            body: {
                json: async () => payloadWithoutEmail
            }
        };
        
        const response = await post_helloWebhook(mockRequest);
        
        if (response.statusCode !== 400) {
            throw new Error(`Expected 400, got ${response.statusCode}`);
        }
        
        const duration = Date.now() - startTime;
        return createTestResult('Missing Email Handling', 'pass', {
            duration,
            message: 'Correctly rejected payload without email'
        });
        
    } catch (error) {
        console.error('[TEST] Missing Email Test Failed:', error);
        return createTestResult('Missing Email Handling', 'fail', {
            duration: Date.now() - startTime,
            error: error.message
        });
    }
}

// === TEST CLEANUP ===

/**
 * Cleanup test data
 * Removes test records created during testing
 */
export async function cleanupTestData() {
    if (!TEST_CONFIG.cleanupAfterTests) {
        console.log('[CLEANUP] Cleanup disabled in configuration');
        return;
    }
    
    console.log('[CLEANUP] Starting test data cleanup');
    
    try {
        // Clean up test applications
        const testApplications = await elevate(wixData.query)(TEST_CONFIG.collections.applications)
            .startsWith('email', TEST_CONFIG.testEmailPrefix)
            .find();
            
        console.log(`[CLEANUP] Found ${testApplications.items.length} test applications to remove`);
        
        for (const app of testApplications.items) {
            await elevate(wixData.remove)(TEST_CONFIG.collections.applications, app._id);
        }
        
        // Note: We cannot easily clean up members and contacts due to Wix restrictions
        // These would need manual cleanup or a separate admin process
        
        console.log('[CLEANUP] Cleanup completed');
        
    } catch (error) {
        console.error('[CLEANUP] Error during cleanup:', error);
    }
}

// === MAIN TEST RUNNER ===

/**
 * Run all tests and return comprehensive results
 */
export async function runAllTests() {
    console.log('=== STARTING COMPREHENSIVE TEST SUITE ===');
    console.log('Test run started at:', new Date().toISOString());
    
    const results = [];
    
    // Define test sequence
    const tests = [
        { name: 'Contact Creation', fn: testContactCreation },
        { name: 'Member Creation', fn: testMemberCreation },
        { name: 'Application Data Building', fn: testApplicationDataBuilding },
        { name: 'Full Webhook Flow', fn: testFullWebhookFlow },
        { name: 'Invalid API Key', fn: testInvalidApiKey },
        { name: 'Missing Email', fn: testMissingEmail }
    ];
    
    // Run tests sequentially
    for (const test of tests) {
        console.log(`\n--- Running Test: ${test.name} ---`);
        try {
            const result = await test.fn();
            results.push(result);
            console.log(`[RESULT] ${test.name}: ${result.status.toUpperCase()}`);
            if (result.message) {
                console.log(`[RESULT] Message: ${result.message}`);
            }
        } catch (error) {
            console.error(`[ERROR] Unexpected error in ${test.name}:`, error);
            results.push(createTestResult(test.name, 'error', {
                error: error.message
            }));
        }
        
        // Small delay between tests
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // Cleanup
    await cleanupTestData();
    
    // Generate summary
    const summary = {
        totalTests: results.length,
        passed: results.filter(r => r.status === 'pass').length,
        failed: results.filter(r => r.status === 'fail').length,
        errors: results.filter(r => r.status === 'error').length,
        timestamp: new Date().toISOString(),
        results: results
    };
    
    console.log('\n=== TEST SUITE SUMMARY ===');
    console.log(`Total Tests: ${summary.totalTests}`);
    console.log(`Passed: ${summary.passed}`);
    console.log(`Failed: ${summary.failed}`);
    console.log(`Errors: ${summary.errors}`);
    console.log(`Success Rate: ${((summary.passed / summary.totalTests) * 100).toFixed(1)}%`);
    
    return summary;
}